generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  authId      String       @unique
  username    String       @unique
  email       String       @unique
  role        String       @default("NOT_VERIFIED")
  password    String       @default("NOT_STORED")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  scores      Score[]
  predictions Prediction[]
}

model Team {
  id          String  @id @unique
  code        String
  name        String
  logoUrl     String
  countryCode String
  country     Country @relation(fields: [countryCode], references: [code])
  homeMatches Match[] @relation("homeMatches")
  awayMatches Match[] @relation("awayMatches")

  @@unique([countryCode, code])
}

model Country {
  id          String       @unique
  code        String       @unique
  name        String
  logoUrl     String
  tournaments Tournament[]
  teams       Team[]
}

model Tournament {
  countryCode String
  id          String      @id @unique
  active      Boolean     @default(false)
  name        String
  code        String
  logoUrl     String
  stages      Stage[]
  standings   Standings[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  country     Country     @relation(fields: [countryCode], references: [code])
}

model Stage {
  id           String       @id @unique
  active       Boolean      @default(false)
  tournamentId String
  name         String
  matches      Match[]
  tournament   Tournament   @relation(fields: [tournamentId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  matchScores  MatchScore[]
}

model Match {
  id          String       @id @unique
  homeTeamId  String?
  awayTeamId  String?
  stageId     String?
  dateTime    DateTime
  predictions Prediction[]
  stage       Stage?       @relation(fields: [stageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  homeTeam    Team?        @relation("homeMatches", fields: [homeTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  awayTeam    Team?        @relation("awayMatches", fields: [awayTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model MatchScore {
  id        String  @id @unique
  stageId   String?
  homeScore Int
  awayScore Int
  stage     Stage?  @relation(fields: [stageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Prediction {
  id        String   @id @default(uuid())
  matchId   String
  userId    String
  homeScore Int
  awayScore Int
  processed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  match     Match    @relation(fields: [matchId], references: [id])
  user      User     @relation(fields: [userId], references: [authId])

  @@unique([matchId, userId])
}

model Standings {
  id           String     @id
  tournamentId String     @unique
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  scores       Score[]
}

model Score {
  id          String    @id @default(uuid())
  username    String
  standingsId String
  user        User      @relation(fields: [username], references: [username])
  standings   Standings @relation(fields: [standingsId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([standingsId, username])
}
